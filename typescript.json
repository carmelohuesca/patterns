{
    "Singleton Pattern": {
        "prefix": "Singleton",
        "body": [
            "export class ${1:Singleton} {",
            "    private static instance: ${1:Singleton};",
            "    private constructor() {",
            "        ${2:// do something...}",
            "    }",
            "    static getInstance() {",
            "        if (!${1:Singleton}.instance) {",
            "            ${1:Singleton}.instance = new ${1:Singleton}();",
            "            ${3:// initialization goes here...}",
            "        }",
            "        return ${1:Singleton}.instance;",
            "    }",
            "    someMethod() { }",
            "}",
            "// do something with the instance...",
            "let instance = ${1:Singleton}.getInstance();"
        ],
        "description": "Creates a Singleton Creational Pattern on Typescript"
    },
    "Factory Pattern": {
        "prefix": "Factory",
        "body": [
            "export interface ${1:Product} {",
            "    init(): any;",
            "}",
            "",
            "export interface Factory {",
            "    create(name: string): ${1:Product};",
            "}",
            "",
            "export class Car implements ${1:Product} {",
            "    tires: number;",
            "    electric: boolean;",
            "    init(): Car {",
            "        this.tires = 4;",
            "        this.electric = true;",
            "        return this;",
            "    }",
            "}",
            "",
            "export class Bike implements ${1:Product} {",
            "    tires: number;",
            "    init(): Bike {",
            "        this.tires = 2;",
            "        return this;",
            "    }",
            "}",
            "",
            "export class ${1:Product}Factory implements Factory {",
            "    create(name: string): ${1:Product} {",
            "        switch (name) {",
            "            case 'car':",
            "                return new Car();",
            "            case 'bike':",
            "                return new Bike();",
            "            default:",
            "                return null;",
            "        }",
            "    }",
            "}",
            "// do something with the instance...",
            "let car = new ${1:Product}Factory().create('car').init();",
            "let bike = new ${1:Product}Factory().create('bike').init();"
        ],
        "description": "Creates a Factory Creational Pattern on Typescript"
    },
    "Strategy Pattern": {
        "prefix": "Strategy",
        "body": [
            "export interface I${1:Strategy} {",
            "    calculate: any;",
            "}",
            "",
            "export class ${1:Strategy}Strategy implements I${1:Strategy} {",
            "    strategy: I${1:Strategy};",
            "",
            "    set${1:Strategy}(strategy: I${1:Strategy}) {",
            "        this.strategy = strategy;",
            "    }",
            "    calculate(values: any[]) {",
            "        this.strategy.calculate(...values);",
            "    }",
            "}",
            "",
            "export class Square implements I${1:Strategy} {",
            "    calculate(value: number) {",
            "        return value * value;",
            "    }",
            "}",
            "",
            "export class Rectangle implements I${1:Strategy} {",
            "    calculate(width: number, height: number) {",
            "        return width * height;",
            "    }",
            "}",
            "",
            "export class Triangle implements I${1:Strategy} {",
            "    calculate(width: number, height: number) {",
            "        return width * height / 2;",
            "    }",
            "}",
            "",
            "// do something with the instance...",
            "let square = new Square()",
            "let instance = new ${1:Strategy}Strategy().setStrategy(square);",
            "instance.strategy.calculate(10,5);"
        ],
        "description": "Creates a Strategy Behaviour Pattern on Typescript"
    },
    "PubSub Pattern": {
        "prefix": "PubSub",
        "body": [
            "interface SubscriptionInterface {",
            "  name: string;",
            "  fn: Function;",
            "}",
            "class Subscription implements SubscriptionInterface {",
            "  name: string;",
            "  fn: Function;",
            "  constructor(name: string, fn: Function) {",
            "    this.name = name;",
            "    this.fn = fn;",
            "  }",
            "}",
            "export class ${1:Subscriber} {",
            "  listeners: Subscription[];",
            "  constructor() {",
            "    this.listeners = [];",
            "  }",
            "  subscribe(name: string, fn: Function) {",
            "    this.listeners.push(new Subscription(name, fn));",
            "  }",
            "  unsubscribe(name: string) {",
            "    const index = this.listeners.findIndex(subscription => subscription.name === name);",
            "    this.listeners.splice(index, 1);",
            "  }",
            "  notify(_ev: string) {",
            "    const args = Array.prototype.slice.call(arguments);",
            "    const name = args.shift();",
            "    this.listeners.forEach(subscription => subscription.name === name ? subscription.fn.apply(this, args) : '');",
            "  }",
            "}"
        ],
        "description": "Creates a PubSub Behaviour Pattern on Typescript"
    }

}